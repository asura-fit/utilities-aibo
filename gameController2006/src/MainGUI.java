
/*
    Copyright (C) 2005  University Of New South Wales

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

/*
 * GUI.java
 *
 * Created on 9 January 2005, 00:12
 */
import java.awt.*;
import java.awt.event.*;
import java.text.*;
import java.util.*;
import javax.swing.*;

/**
 * MainGUI is the starting class of the program. The GUI is shown and it
 * interacts with a RoboCupGameControlData and starts a Broadcast on a new
 * thread to broadcast the RoboCupGameControlData structure.
 *
 * The majority of the GUI code is generated by NetBeans 4.
 *
 * @author willu@cse.unsw.edu.au shnl327@cse.unsw.edu.au
 */
public class MainGUI extends javax.swing.JFrame {
    
    // create a RoboCupGameControlData for use
    private static RoboCupGameControlData data;
    
    // instance of the GameController to use for the GUI
    // the GameController thread is started in main
    private static Broadcast broadcast;
    private static Listen listen;

	// The colour of the kickoff team
	// -1 = not set, Constants.TEAM_BLUE or Constants.TEAM_RED
	private static int halfKickoffTeam = -1;

	// For logging
	private static java.io.PrintWriter log = null;
	
	// Should we beep?
	private static boolean quiet = false;

	static boolean timeout = false;
	static boolean halfTime = false;

    // number of players per team
    private static int numPlayers = 4;

	private javax.swing.JToggleButton[] cmdRed;
	private javax.swing.JToggleButton[] cmdBlue;
	private static javax.swing.JButton[] cmdRedUnpenalise;
	private static javax.swing.JButton[] cmdBlueUnpenalise;

    /** Creates new form GUI */
    // team numbers are given by GameController to initialise data structure
    // and broadcast address to initialise the Broadcast class
    public MainGUI(int blueNumber, int redNumber, String broadcastAddr, int port, int numPlayers, boolean quiet) {
        
        this.quiet = quiet;
        this.numPlayers = numPlayers;
        
       // open the log for appending
        try {
        	if (log == null)
	        	log = new java.io.PrintWriter(new java.io.FileWriter(Constants.LOG_FILENAME, true));
        } catch (java.io.IOException e) {
        	throw new RuntimeException(e.toString());
        }
        
        // create the GameController and RoboCupGameControlData based on the 
        // command line arguments
        int[] teams = new int[2];
        
        teams[0] = blueNumber;
        teams[1] = redNumber;
        
        data      = new RoboCupGameControlData((byte)blueNumber, (byte)redNumber, numPlayers);
        broadcast = new Broadcast(data, broadcastAddr, port);
        listen = new Listen(teams, port, this);

        // start the GameController thread
        Thread broadcastThread = new Thread(broadcast);
        broadcastThread.start();
        
        initComponents();

		setTitle(getTitle() + " " + Constants.GUI_VERSION + "-" + RoboCupGameControlData.STRUCT_VERSION + "." + Listen.STRUCT_VERSION );

		// set things up so we can access the player buttons by variable

		cmdRed = new javax.swing.JToggleButton[Constants.MAX_NUM_PLAYERS+1];
		cmdBlue = new javax.swing.JToggleButton[Constants.MAX_NUM_PLAYERS+1];
		cmdRedUnpenalise = new javax.swing.JButton[Constants.MAX_NUM_PLAYERS+1];
		cmdBlueUnpenalise = new javax.swing.JButton[Constants.MAX_NUM_PLAYERS+1];
		
		cmdRed[1] = cmdRed1;
		cmdBlue[1] = cmdBlue1;
		cmdRed[2] = cmdRed2;
		cmdBlue[2] = cmdBlue2;
		cmdRed[3] = cmdRed3;
		cmdBlue[3] = cmdBlue3;
		cmdRed[4] = cmdRed4;
		cmdBlue[4] = cmdBlue4;
		cmdRed[5] = cmdRed5;
		cmdBlue[5] = cmdBlue5;
		cmdRed[6] = cmdRed6;
		cmdBlue[6] = cmdBlue6;
		cmdRed[7] = cmdRed7;
		cmdBlue[7] = cmdBlue7;
		cmdRed[8] = cmdRed8;
		cmdBlue[8] = cmdBlue8;
		cmdRed[9] = cmdRed9;
		cmdBlue[9] = cmdBlue9;
		cmdRed[10] = cmdRed10;
		cmdBlue[10] = cmdBlue10;
		cmdRed[11] = cmdRed11;
		cmdBlue[11] = cmdBlue11;
		cmdRedUnpenalise[1] = cmdRed1Unpenalise;
		cmdBlueUnpenalise[1] = cmdBlue1Unpenalise;
		cmdRedUnpenalise[2] = cmdRed2Unpenalise;
		cmdBlueUnpenalise[2] = cmdBlue2Unpenalise;
		cmdRedUnpenalise[3] = cmdRed3Unpenalise;
		cmdBlueUnpenalise[3] = cmdBlue3Unpenalise;
		cmdRedUnpenalise[4] = cmdRed4Unpenalise;
		cmdBlueUnpenalise[4] = cmdBlue4Unpenalise;
		cmdRedUnpenalise[5] = cmdRed5Unpenalise;
		cmdBlueUnpenalise[5] = cmdBlue5Unpenalise;
		cmdRedUnpenalise[6] = cmdRed6Unpenalise;
		cmdBlueUnpenalise[6] = cmdBlue6Unpenalise;
		cmdRedUnpenalise[7] = cmdRed7Unpenalise;
		cmdBlueUnpenalise[7] = cmdBlue7Unpenalise;
		cmdRedUnpenalise[8] = cmdRed8Unpenalise;
		cmdBlueUnpenalise[8] = cmdBlue8Unpenalise;
		cmdRedUnpenalise[9] = cmdRed9Unpenalise;
		cmdBlueUnpenalise[9] = cmdBlue9Unpenalise;
		cmdRedUnpenalise[10] = cmdRed10Unpenalise;
		cmdBlueUnpenalise[10] = cmdBlue10Unpenalise;
		cmdRedUnpenalise[11] = cmdRed11Unpenalise;
		cmdBlueUnpenalise[11] = cmdBlue11Unpenalise;

        // start timer object
        new javax.swing.Timer(oneSecond, clock).start();

        cmdInvisible.setVisible(false);
        lblTime.setText(mins + ":00");     // initialise clockface
        
        // turn off the buttons for players not in the game
        for (int i=numPlayers+1; i<=Constants.MAX_NUM_PLAYERS; i++) {
         	cmdBlue[i].setEnabled(false);
        	cmdBlueUnpenalise[i].setEnabled(false);
        	cmdRed[i].setEnabled(false);
        	cmdRedUnpenalise[i].setEnabled(false);
		}
        
        // initialse team panels with team numbers
        pnlBlue.setBorder(new javax.swing.border.TitledBorder(null, 
                          "Blue Team - #" + data.getTeamNumber(Constants.TEAM_BLUE),
                          javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                          javax.swing.border.TitledBorder.DEFAULT_POSITION,
                          new java.awt.Font("Dialog", 1, 12)));
        pnlRed.setBorder(new javax.swing.border.TitledBorder(null, 
                         "Red Team - #" + data.getTeamNumber(Constants.TEAM_RED),
                         javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                         javax.swing.border.TitledBorder.DEFAULT_POSITION,
                         new java.awt.Font("Dialog", 1, 12)));
        
        // start the listening thread
        Thread listenThread = new Thread(listen);
        listenThread.start();
        
        logString("Starting Gamecontroller " + Constants.GUI_VERSION + ": " + 
        		"Red team is #" + data.getTeamNumber(Constants.TEAM_RED) +
        		", Blue team is #" + data.getTeamNumber(Constants.TEAM_BLUE));
    }
    

	private static void logString(String s) {
		log.print((new java.util.Date()));
		log.print(" : ");
		log.println(s);
		log.flush();
	}
	
	private static String getGameTimeString(int mins, int secs) {
		return ("" + mins + ":" + ((secs < 10)?"0":"") + secs);
	}
    
	private static String getGameTimeString() {
		return getGameTimeString(mins, secs);
	}
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        gameButtons = new javax.swing.ButtonGroup();
        kickOffButtons = new javax.swing.ButtonGroup();
        penaltyButtons = new javax.swing.ButtonGroup();
        pnlKickOff = new javax.swing.JPanel();
        cmdBlueKickOff = new javax.swing.JToggleButton();
        cmdRedKickOff = new javax.swing.JToggleButton();
        pnlPenalties = new javax.swing.JPanel();
        cmdBallHolding = new javax.swing.JToggleButton();
        cmdIllegalDefender = new javax.swing.JToggleButton();
        cmdGoaliePushing = new javax.swing.JToggleButton();
        cmdPlayerPushing = new javax.swing.JToggleButton();
        cmdLeavingField = new javax.swing.JToggleButton();
        cmdPickupRequest = new javax.swing.JToggleButton();
        cmdIllegalDefense = new javax.swing.JToggleButton();
        cmdObstruction = new javax.swing.JToggleButton();
        cmdDamage = new javax.swing.JToggleButton();
        cmdInvisible = new javax.swing.JToggleButton();
        pnlStatus = new javax.swing.JPanel();
        pnlBlue = new javax.swing.JPanel();
        cmdBlue1 = new javax.swing.JToggleButton();
        cmdBlue1Unpenalise = new javax.swing.JButton();
        cmdBlue2 = new javax.swing.JToggleButton();
        cmdBlue2Unpenalise = new javax.swing.JButton();
        cmdBlue3 = new javax.swing.JToggleButton();
        cmdBlue3Unpenalise = new javax.swing.JButton();
        cmdBlue4 = new javax.swing.JToggleButton();
        cmdBlue4Unpenalise = new javax.swing.JButton();
        cmdBlue5 = new javax.swing.JToggleButton();
        cmdBlue5Unpenalise = new javax.swing.JButton();
        cmdBlue6 = new javax.swing.JToggleButton();
        cmdBlue6Unpenalise = new javax.swing.JButton();
        cmdBlue7 = new javax.swing.JToggleButton();
        cmdBlue7Unpenalise = new javax.swing.JButton();
        cmdBlue8 = new javax.swing.JToggleButton();
        cmdBlue8Unpenalise = new javax.swing.JButton();
        cmdBlue9 = new javax.swing.JToggleButton();
        cmdBlue9Unpenalise = new javax.swing.JButton();
        cmdBlue10 = new javax.swing.JToggleButton();
        cmdBlue10Unpenalise = new javax.swing.JButton();
        cmdBlue11 = new javax.swing.JToggleButton();
        cmdBlue11Unpenalise = new javax.swing.JButton();
        pnlRed = new javax.swing.JPanel();
        cmdRed1 = new javax.swing.JToggleButton();
        cmdRed1Unpenalise = new javax.swing.JButton();
        cmdRed2 = new javax.swing.JToggleButton();
        cmdRed2Unpenalise = new javax.swing.JButton();
        cmdRed3 = new javax.swing.JToggleButton();
        cmdRed3Unpenalise = new javax.swing.JButton();
        cmdRed4 = new javax.swing.JToggleButton();
        cmdRed4Unpenalise = new javax.swing.JButton();
        cmdRed5 = new javax.swing.JToggleButton();
        cmdRed5Unpenalise = new javax.swing.JButton();
        cmdRed6 = new javax.swing.JToggleButton();
        cmdRed6Unpenalise = new javax.swing.JButton();
        cmdRed7 = new javax.swing.JToggleButton();
        cmdRed7Unpenalise = new javax.swing.JButton();
        cmdRed8 = new javax.swing.JToggleButton();
        cmdRed8Unpenalise = new javax.swing.JButton();
        cmdRed9 = new javax.swing.JToggleButton();
        cmdRed9Unpenalise = new javax.swing.JButton();
        cmdRed10 = new javax.swing.JToggleButton();
        cmdRed10Unpenalise = new javax.swing.JButton();
        cmdRed11 = new javax.swing.JToggleButton();
        cmdRed11Unpenalise = new javax.swing.JButton();
        pnlScore = new javax.swing.JPanel();
        lblBlueTeam = new javax.swing.JLabel();
        lblBlueScore = new javax.swing.JLabel();
        cmdBlueScoreUp = new javax.swing.JButton();
        cmdBlueScoreDown = new javax.swing.JButton();
        lblRedTeam = new javax.swing.JLabel();
        lblRedScore = new javax.swing.JLabel();
        cmdRedScoreUp = new javax.swing.JButton();
        cmdRedScoreDown = new javax.swing.JButton();
        pnlTime = new javax.swing.JPanel();
        cmdTimeStart = new javax.swing.JButton();
        cmdTimeReset = new javax.swing.JButton();
        cmbHalf = new javax.swing.JComboBox();
        lblTime = new javax.swing.JTextField();
        pnlEventTime = new javax.swing.JPanel();
        lblEventTime = new javax.swing.JTextField();
        btnTimeOutDone = new javax.swing.JButton();
        btnBlueTimeOut = new javax.swing.JButton();
        btnRedTimeOut = new javax.swing.JButton();
        pnlMain = new javax.swing.JPanel();
        cmdInitial = new javax.swing.JToggleButton();
        cmdReady = new javax.swing.JToggleButton();
        cmdSet = new javax.swing.JToggleButton();
        cmdKickOff = new javax.swing.JToggleButton();
        cmdFinish = new javax.swing.JToggleButton();
        cmdBlueDropIn = new javax.swing.JButton();
        cmdRedDropIn = new javax.swing.JButton();
        gameDetailsPanel = new javax.swing.JPanel();
        chkAutoPause = new javax.swing.JCheckBox();
        chkPenaltyShoot = new javax.swing.JCheckBox();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RoboCup GameController");
        setName("frmMain");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                close(evt);
            }
        });

        pnlKickOff.setLayout(new java.awt.GridBagLayout());

        pnlKickOff.setBorder(new javax.swing.border.TitledBorder(null, "Kick Off Team", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
        kickOffButtons.add(cmdBlueKickOff);
        cmdBlueKickOff.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlueKickOff.setSelected(true);
        cmdBlueKickOff.setText("Blue Kick Off");
        cmdBlueKickOff.setToolTipText("Click this button to select the Blue team for the next kick off.");
        cmdBlueKickOff.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdBlueKickOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBlueKickOff_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlKickOff.add(cmdBlueKickOff, gridBagConstraints);

        kickOffButtons.add(cmdRedKickOff);
        cmdRedKickOff.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRedKickOff.setText("Red Kick Off");
        cmdRedKickOff.setToolTipText("Click this button to select the Red team for the next kick off.");
        cmdRedKickOff.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdRedKickOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRedKickOff_selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlKickOff.add(cmdRedKickOff, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(pnlKickOff, gridBagConstraints);

        pnlPenalties.setLayout(new java.awt.GridBagLayout());

        pnlPenalties.setBorder(new javax.swing.border.TitledBorder(null, "Penalties", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
        penaltyButtons.add(cmdBallHolding);
        cmdBallHolding.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBallHolding.setText("Ball Holding");
        cmdBallHolding.setToolTipText("Sanction a \"Ball Holding\" penalty to the selected players.");
        cmdBallHolding.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdBallHolding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                penalty_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlPenalties.add(cmdBallHolding, gridBagConstraints);

        penaltyButtons.add(cmdIllegalDefender);
        cmdIllegalDefender.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdIllegalDefender.setText("Illegal Defender");
        cmdIllegalDefender.setToolTipText("Sanction a \"Illegal Defender\" penalty to the selected players.");
        cmdIllegalDefender.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdIllegalDefender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                penalty_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlPenalties.add(cmdIllegalDefender, gridBagConstraints);

        penaltyButtons.add(cmdGoaliePushing);
        cmdGoaliePushing.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdGoaliePushing.setText("Goalie Pushing");
        cmdGoaliePushing.setToolTipText("Sanction a \"Goalie Pushing\" penalty to the selected players.");
        cmdGoaliePushing.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdGoaliePushing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                penalty_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlPenalties.add(cmdGoaliePushing, gridBagConstraints);

        penaltyButtons.add(cmdPlayerPushing);
        cmdPlayerPushing.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdPlayerPushing.setText("Player Pushing");
        cmdPlayerPushing.setToolTipText("Sanction a \"Player Pushing\" penalty to the selected players.");
        cmdPlayerPushing.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdPlayerPushing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                penalty_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlPenalties.add(cmdPlayerPushing, gridBagConstraints);

        penaltyButtons.add(cmdLeavingField);
        cmdLeavingField.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdLeavingField.setText("Leaving Field");
        cmdLeavingField.setToolTipText("Sanction a \"Leaving the Field\" penalty to the selected players.");
        cmdLeavingField.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdLeavingField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                penalty_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlPenalties.add(cmdLeavingField, gridBagConstraints);

        penaltyButtons.add(cmdPickupRequest);
        cmdPickupRequest.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdPickupRequest.setText("Pick Up Request");
        cmdPickupRequest.setToolTipText("Sanction a \"Pick Up Request\" penalty to the selected players.");
        cmdPickupRequest.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdPickupRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                penalty_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlPenalties.add(cmdPickupRequest, gridBagConstraints);

        penaltyButtons.add(cmdIllegalDefense);
        cmdIllegalDefense.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdIllegalDefense.setText("Illegal Defense");
        cmdIllegalDefense.setToolTipText("Sanction a \"Illegal Defense\" penalty to the selected players.");
        cmdIllegalDefense.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdIllegalDefense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                penalty_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlPenalties.add(cmdIllegalDefense, gridBagConstraints);

        penaltyButtons.add(cmdObstruction);
        cmdObstruction.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdObstruction.setText("Obstruction");
        cmdObstruction.setToolTipText("Sanction a \"Obstruction\" penalty to the selected players.");
        cmdObstruction.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdObstruction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                penalty_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlPenalties.add(cmdObstruction, gridBagConstraints);

        penaltyButtons.add(cmdDamage);
        cmdDamage.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdDamage.setText("Damage");
        cmdDamage.setToolTipText("Sanction a \"Damage\" penalty to the selected players.");
        cmdDamage.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdDamage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                penalty_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlPenalties.add(cmdDamage, gridBagConstraints);

        penaltyButtons.add(cmdInvisible);
        cmdInvisible.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdInvisible.setSelected(true);
        cmdInvisible.setText("Invisible");
        cmdInvisible.setToolTipText("This is here to simulate none selected in the button group");
        cmdInvisible.setMargin(new java.awt.Insets(2, 5, 2, 5));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        pnlPenalties.add(cmdInvisible, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(pnlPenalties, gridBagConstraints);

        pnlStatus.setLayout(new java.awt.GridBagLayout());

        pnlStatus.setBorder(new javax.swing.border.TitledBorder(null, "Status", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
        pnlBlue.setLayout(new java.awt.GridBagLayout());

        pnlBlue.setBackground(new java.awt.Color(153, 153, 255));
        pnlBlue.setBorder(new javax.swing.border.TitledBorder(null, "Blue Team", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
        cmdBlue1.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue1.setText("Player 1");
        cmdBlue1.setToolTipText("Click to selected Blue robot 1");
        cmdBlue1.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdBlue1.setOpaque(false);
        cmdBlue1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBlue_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue1, gridBagConstraints);

        cmdBlue1Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue1Unpenalise.setText("No penalty");
        cmdBlue1Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdBlue1Unpenalise.setActionCommand("Blue 1");
        cmdBlue1Unpenalise.setEnabled(false);
        cmdBlue1Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdBlue1Unpenalise.setOpaque(false);
        cmdBlue1Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue1Unpenalise, gridBagConstraints);

        cmdBlue2.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue2.setText("Player 2");
        cmdBlue2.setToolTipText("Click to selected Blue robot 2");
        cmdBlue2.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdBlue2.setOpaque(false);
        cmdBlue2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBlue_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue2, gridBagConstraints);

        cmdBlue2Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue2Unpenalise.setText("No penalty");
        cmdBlue2Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdBlue2Unpenalise.setActionCommand("Blue 2");
        cmdBlue2Unpenalise.setEnabled(false);
        cmdBlue2Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdBlue2Unpenalise.setOpaque(false);
        cmdBlue2Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue2Unpenalise, gridBagConstraints);

        cmdBlue3.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue3.setText("Player 3");
        cmdBlue3.setToolTipText("Click to selected Blue robot 3");
        cmdBlue3.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdBlue3.setOpaque(false);
        cmdBlue3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBlue_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue3, gridBagConstraints);

        cmdBlue3Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue3Unpenalise.setText("No penalty");
        cmdBlue3Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdBlue3Unpenalise.setActionCommand("Blue 3");
        cmdBlue3Unpenalise.setEnabled(false);
        cmdBlue3Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdBlue3Unpenalise.setOpaque(false);
        cmdBlue3Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue3Unpenalise, gridBagConstraints);

        cmdBlue4.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue4.setText("Player 4");
        cmdBlue4.setToolTipText("Click to selected Blue robot 4");
        cmdBlue4.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdBlue4.setOpaque(false);
        cmdBlue4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBlue_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue4, gridBagConstraints);

        cmdBlue4Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue4Unpenalise.setText("No penalty");
        cmdBlue4Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdBlue4Unpenalise.setActionCommand("Blue 4");
        cmdBlue4Unpenalise.setEnabled(false);
        cmdBlue4Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdBlue4Unpenalise.setOpaque(false);
        cmdBlue4Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue4Unpenalise, gridBagConstraints);

        cmdBlue5.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue5.setText("Player 5");
        cmdBlue5.setToolTipText("Click to selected Blue robot 4");
        cmdBlue5.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdBlue5.setOpaque(false);
        cmdBlue5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBlue_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue5, gridBagConstraints);

        cmdBlue5Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue5Unpenalise.setText("No penalty");
        cmdBlue5Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdBlue5Unpenalise.setActionCommand("Blue 5");
        cmdBlue5Unpenalise.setEnabled(false);
        cmdBlue5Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdBlue5Unpenalise.setOpaque(false);
        cmdBlue5Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue5Unpenalise, gridBagConstraints);

        cmdBlue6.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue6.setText("Player 6");
        cmdBlue6.setToolTipText("Click to selected Blue robot 4");
        cmdBlue6.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdBlue6.setOpaque(false);
        cmdBlue6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBlue_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue6, gridBagConstraints);

        cmdBlue6Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue6Unpenalise.setText("No penalty");
        cmdBlue6Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdBlue6Unpenalise.setActionCommand("Blue 6");
        cmdBlue6Unpenalise.setEnabled(false);
        cmdBlue6Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdBlue6Unpenalise.setOpaque(false);
        cmdBlue6Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue6Unpenalise, gridBagConstraints);

        cmdBlue7.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue7.setText("Player 7");
        cmdBlue7.setToolTipText("Click to selected Blue robot 4");
        cmdBlue7.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdBlue7.setOpaque(false);
        cmdBlue7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBlue_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue7, gridBagConstraints);

        cmdBlue7Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue7Unpenalise.setText("No penalty");
        cmdBlue7Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdBlue7Unpenalise.setActionCommand("Blue 7");
        cmdBlue7Unpenalise.setEnabled(false);
        cmdBlue7Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdBlue7Unpenalise.setOpaque(false);
        cmdBlue7Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue7Unpenalise, gridBagConstraints);

        cmdBlue8.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue8.setText("Player 8");
        cmdBlue8.setToolTipText("Click to selected Blue robot 4");
        cmdBlue8.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdBlue8.setOpaque(false);
        cmdBlue8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBlue_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue8, gridBagConstraints);

        cmdBlue8Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue8Unpenalise.setText("No penalty");
        cmdBlue8Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdBlue8Unpenalise.setActionCommand("Blue 8");
        cmdBlue8Unpenalise.setEnabled(false);
        cmdBlue8Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdBlue8Unpenalise.setOpaque(false);
        cmdBlue8Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue8Unpenalise, gridBagConstraints);

        cmdBlue9.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue9.setText("Player 9");
        cmdBlue9.setToolTipText("Click to selected Blue robot 4");
        cmdBlue9.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdBlue9.setOpaque(false);
        cmdBlue9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBlue_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue9, gridBagConstraints);

        cmdBlue9Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue9Unpenalise.setText("No penalty");
        cmdBlue9Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdBlue9Unpenalise.setActionCommand("Blue 9");
        cmdBlue9Unpenalise.setEnabled(false);
        cmdBlue9Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdBlue9Unpenalise.setOpaque(false);
        cmdBlue9Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue9Unpenalise, gridBagConstraints);

        cmdBlue10.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue10.setText("Player 10");
        cmdBlue10.setToolTipText("Click to selected Blue robot 4");
        cmdBlue10.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdBlue10.setOpaque(false);
        cmdBlue10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBlue_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue10, gridBagConstraints);

        cmdBlue10Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue10Unpenalise.setText("No penalty");
        cmdBlue10Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdBlue10Unpenalise.setActionCommand("Blue 10");
        cmdBlue10Unpenalise.setEnabled(false);
        cmdBlue10Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdBlue10Unpenalise.setOpaque(false);
        cmdBlue10Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue10Unpenalise, gridBagConstraints);

        cmdBlue11.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue11.setText("Player 11");
        cmdBlue11.setToolTipText("Click to selected Blue robot 4");
        cmdBlue11.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdBlue11.setOpaque(false);
        cmdBlue11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBlue_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue11, gridBagConstraints);

        cmdBlue11Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlue11Unpenalise.setText("No penalty");
        cmdBlue11Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdBlue11Unpenalise.setActionCommand("Blue 11");
        cmdBlue11Unpenalise.setEnabled(false);
        cmdBlue11Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdBlue11Unpenalise.setOpaque(false);
        cmdBlue11Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlBlue.add(cmdBlue11Unpenalise, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlStatus.add(pnlBlue, gridBagConstraints);

        pnlRed.setLayout(new java.awt.GridBagLayout());

        pnlRed.setBackground(new java.awt.Color(255, 102, 102));
        pnlRed.setBorder(new javax.swing.border.TitledBorder(null, "Red Team", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
        cmdRed1.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed1.setText("Player 1");
        cmdRed1.setToolTipText("Click to selected Red robot 1");
        cmdRed1.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdRed1.setOpaque(false);
        cmdRed1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRed_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed1, gridBagConstraints);

        cmdRed1Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed1Unpenalise.setText("No penalty");
        cmdRed1Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdRed1Unpenalise.setActionCommand("Red 1");
        cmdRed1Unpenalise.setEnabled(false);
        cmdRed1Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdRed1Unpenalise.setOpaque(false);
        cmdRed1Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed1Unpenalise, gridBagConstraints);

        cmdRed2.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed2.setText("Player 2");
        cmdRed2.setToolTipText("Click to selected Red robot 2");
        cmdRed2.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdRed2.setOpaque(false);
        cmdRed2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRed_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed2, gridBagConstraints);

        cmdRed2Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed2Unpenalise.setText("No penalty");
        cmdRed2Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdRed2Unpenalise.setActionCommand("Red 2");
        cmdRed2Unpenalise.setEnabled(false);
        cmdRed2Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdRed2Unpenalise.setOpaque(false);
        cmdRed2Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed2Unpenalise, gridBagConstraints);

        cmdRed3.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed3.setText("Player 3");
        cmdRed3.setToolTipText("Click to selected Red robot 3");
        cmdRed3.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdRed3.setOpaque(false);
        cmdRed3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRed_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed3, gridBagConstraints);

        cmdRed3Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed3Unpenalise.setText("No penalty");
        cmdRed3Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdRed3Unpenalise.setActionCommand("Red 3");
        cmdRed3Unpenalise.setEnabled(false);
        cmdRed3Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdRed3Unpenalise.setOpaque(false);
        cmdRed3Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed3Unpenalise, gridBagConstraints);

        cmdRed4.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed4.setText("Player 4");
        cmdRed4.setToolTipText("Click to selected Red robot 4");
        cmdRed4.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdRed4.setOpaque(false);
        cmdRed4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRed_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed4, gridBagConstraints);

        cmdRed4Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed4Unpenalise.setText("No penalty");
        cmdRed4Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdRed4Unpenalise.setActionCommand("Red 4");
        cmdRed4Unpenalise.setEnabled(false);
        cmdRed4Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdRed4Unpenalise.setOpaque(false);
        cmdRed4Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed4Unpenalise, gridBagConstraints);

        cmdRed5.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed5.setText("Player 5");
        cmdRed5.setToolTipText("Click to selected Red robot 4");
        cmdRed5.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdRed5.setOpaque(false);
        cmdRed5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRed_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed5, gridBagConstraints);

        cmdRed5Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed5Unpenalise.setText("No penalty");
        cmdRed5Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdRed5Unpenalise.setActionCommand("Red 5");
        cmdRed5Unpenalise.setEnabled(false);
        cmdRed5Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdRed5Unpenalise.setOpaque(false);
        cmdRed5Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed5Unpenalise, gridBagConstraints);

        cmdRed6.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed6.setText("Player 6");
        cmdRed6.setToolTipText("Click to selected Red robot 4");
        cmdRed6.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdRed6.setOpaque(false);
        cmdRed6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRed_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed6, gridBagConstraints);

        cmdRed6Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed6Unpenalise.setText("No penalty");
        cmdRed6Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdRed6Unpenalise.setActionCommand("Red 6");
        cmdRed6Unpenalise.setEnabled(false);
        cmdRed6Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdRed6Unpenalise.setOpaque(false);
        cmdRed6Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed6Unpenalise, gridBagConstraints);

        cmdRed7.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed7.setText("Player 7");
        cmdRed7.setToolTipText("Click to selected Red robot 4");
        cmdRed7.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdRed7.setOpaque(false);
        cmdRed7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRed_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed7, gridBagConstraints);

        cmdRed7Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed7Unpenalise.setText("No penalty");
        cmdRed7Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdRed7Unpenalise.setActionCommand("Red 7");
        cmdRed7Unpenalise.setEnabled(false);
        cmdRed7Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdRed7Unpenalise.setOpaque(false);
        cmdRed7Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed7Unpenalise, gridBagConstraints);

        cmdRed8.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed8.setText("Player 8");
        cmdRed8.setToolTipText("Click to selected Red robot 4");
        cmdRed8.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdRed8.setOpaque(false);
        cmdRed8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRed_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed8, gridBagConstraints);

        cmdRed8Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed8Unpenalise.setText("No penalty");
        cmdRed8Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdRed8Unpenalise.setActionCommand("Red 8");
        cmdRed8Unpenalise.setEnabled(false);
        cmdRed8Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdRed8Unpenalise.setOpaque(false);
        cmdRed8Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed8Unpenalise, gridBagConstraints);

        cmdRed9.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed9.setText("Player 9");
        cmdRed9.setToolTipText("Click to selected Red robot 4");
        cmdRed9.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdRed9.setOpaque(false);
        cmdRed9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRed_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed9, gridBagConstraints);

        cmdRed9Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed9Unpenalise.setText("No penalty");
        cmdRed9Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdRed9Unpenalise.setActionCommand("Red 9");
        cmdRed9Unpenalise.setEnabled(false);
        cmdRed9Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdRed9Unpenalise.setOpaque(false);
        cmdRed9Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed9Unpenalise, gridBagConstraints);

        cmdRed10.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed10.setText("Player 10");
        cmdRed10.setToolTipText("Click to selected Red robot 4");
        cmdRed10.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdRed10.setOpaque(false);
        cmdRed10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRed_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed10, gridBagConstraints);

        cmdRed10Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed10Unpenalise.setText("No penalty");
        cmdRed10Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdRed10Unpenalise.setActionCommand("Red 10");
        cmdRed10Unpenalise.setEnabled(false);
        cmdRed10Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdRed10Unpenalise.setOpaque(false);
        cmdRed10Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed10Unpenalise, gridBagConstraints);

        cmdRed11.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed11.setText("Player 11");
        cmdRed11.setToolTipText("Click to selected Red robot 4");
        cmdRed11.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdRed11.setOpaque(false);
        cmdRed11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRed_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed11, gridBagConstraints);

        cmdRed11Unpenalise.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRed11Unpenalise.setText("No penalty");
        cmdRed11Unpenalise.setToolTipText("If penalised, click here to unpenalise player.");
        cmdRed11Unpenalise.setActionCommand("Red 11");
        cmdRed11Unpenalise.setEnabled(false);
        cmdRed11Unpenalise.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdRed11Unpenalise.setOpaque(false);
        cmdRed11Unpenalise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnpenalise(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlRed.add(cmdRed11Unpenalise, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlStatus.add(pnlRed, gridBagConstraints);

        pnlScore.setLayout(new java.awt.GridBagLayout());

        pnlScore.setBorder(new javax.swing.border.TitledBorder(null, "Score", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
        lblBlueTeam.setFont(new java.awt.Font("Dialog", 1, 24));
        lblBlueTeam.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBlueTeam.setText("BLUE:");
        lblBlueTeam.setToolTipText("Blue team score.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.5;
        gridBagConstraints.weighty = 1.0;
        pnlScore.add(lblBlueTeam, gridBagConstraints);

        lblBlueScore.setFont(new java.awt.Font("Dialog", 1, 24));
        lblBlueScore.setText("0");
        lblBlueScore.setToolTipText("Blue team score.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        pnlScore.add(lblBlueScore, gridBagConstraints);

        cmdBlueScoreUp.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlueScoreUp.setText("+");
        cmdBlueScoreUp.setToolTipText("Click to increment Blue score.");
        cmdBlueScoreUp.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdBlueScoreUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBlueScoreUp_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        pnlScore.add(cmdBlueScoreUp, gridBagConstraints);

        cmdBlueScoreDown.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlueScoreDown.setText("-");
        cmdBlueScoreDown.setToolTipText("Click to decrement Blue score.");
        cmdBlueScoreDown.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdBlueScoreDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBlueScoreDown_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        pnlScore.add(cmdBlueScoreDown, gridBagConstraints);

        lblRedTeam.setFont(new java.awt.Font("Dialog", 1, 24));
        lblRedTeam.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRedTeam.setText("RED:");
        lblRedTeam.setToolTipText("Red team score.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.5;
        gridBagConstraints.weighty = 1.0;
        pnlScore.add(lblRedTeam, gridBagConstraints);

        lblRedScore.setFont(new java.awt.Font("Dialog", 1, 24));
        lblRedScore.setText("0");
        lblRedScore.setToolTipText("Red team score.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        pnlScore.add(lblRedScore, gridBagConstraints);

        cmdRedScoreUp.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRedScoreUp.setText("+");
        cmdRedScoreUp.setToolTipText("Click to increment Red score.");
        cmdRedScoreUp.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdRedScoreUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRedScoreUp_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        pnlScore.add(cmdRedScoreUp, gridBagConstraints);

        cmdRedScoreDown.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRedScoreDown.setText("-");
        cmdRedScoreDown.setToolTipText("Click to decrement Red score.");
        cmdRedScoreDown.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdRedScoreDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRedScoreDown_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 3, 4);
        pnlScore.add(cmdRedScoreDown, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlStatus.add(pnlScore, gridBagConstraints);

        pnlTime.setLayout(new java.awt.GridBagLayout());

        pnlTime.setBorder(new javax.swing.border.TitledBorder(null, "Game Time", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
        cmdTimeStart.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdTimeStart.setText("Start / Stop");
        cmdTimeStart.setToolTipText("Start / Stop the timer.");
        cmdTimeStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTimeStart_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 2.0;
        pnlTime.add(cmdTimeStart, gridBagConstraints);

        cmdTimeReset.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdTimeReset.setText("Reset");
        cmdTimeReset.setToolTipText("Reset the timer.");
        cmdTimeReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTimeReset_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlTime.add(cmdTimeReset, gridBagConstraints);

        cmbHalf.setFont(new java.awt.Font("Dialog", 0, 12));
        cmbHalf.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "First Half", "Second Half" }));
        cmbHalf.setToolTipText("Select whether the game is in first half or second half. Changing this option will switch the teams around automatically.");
        cmbHalf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbHalfActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        pnlTime.add(cmbHalf, gridBagConstraints);

        lblTime.setFont(new java.awt.Font("Dialog", 1, 36));
        lblTime.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        lblTime.setText("00:00");
        lblTime.setToolTipText("Time remaining in half (unofficial). If you edit the time, press ENTER to commit the changes.");
        lblTime.setEnabled(false);
        lblTime.setMinimumSize(new java.awt.Dimension(115, 49));
        lblTime.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lblTimeKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        pnlTime.add(lblTime, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 4.0;
        pnlStatus.add(pnlTime, gridBagConstraints);

        pnlEventTime.setLayout(new java.awt.GridBagLayout());

        pnlEventTime.setBorder(new javax.swing.border.TitledBorder(null, "Special Time : No current event", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
        lblEventTime.setFont(new java.awt.Font("Dialog", 1, 36));
        lblEventTime.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        lblEventTime.setText("00:00");
        lblEventTime.setToolTipText("Time remaining in event");
        lblEventTime.setEnabled(false);
        lblEventTime.setMinimumSize(new java.awt.Dimension(115, 49));
        lblEventTime.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lblSpecialTimeKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlEventTime.add(lblEventTime, gridBagConstraints);

        btnTimeOutDone.setText("Time Out Done");
        btnTimeOutDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTimeOutDone_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlEventTime.add(btnTimeOutDone, gridBagConstraints);

        btnBlueTimeOut.setBackground(new java.awt.Color(153, 153, 255));
        btnBlueTimeOut.setText("Blue Time Out");
        btnBlueTimeOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBlueTimeOut_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlEventTime.add(btnBlueTimeOut, gridBagConstraints);

        btnRedTimeOut.setBackground(new java.awt.Color(255, 102, 102));
        btnRedTimeOut.setText("Red Time Out");
        btnRedTimeOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRedTimeOut_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlEventTime.add(btnRedTimeOut, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlStatus.add(pnlEventTime, gridBagConstraints);
        pnlEventTime.getAccessibleContext().setAccessibleName("Event Time : None");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 6.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(pnlStatus, gridBagConstraints);

        pnlMain.setLayout(new java.awt.GridBagLayout());

        pnlMain.setBorder(new javax.swing.border.TitledBorder(null, "Game State", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
        gameButtons.add(cmdInitial);
        cmdInitial.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdInitial.setSelected(true);
        cmdInitial.setText("Initial");
        cmdInitial.setToolTipText("Click this button to set the game to the \"Initial\" state.");
        cmdInitial.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdInitial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdInitial_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlMain.add(cmdInitial, gridBagConstraints);

        gameButtons.add(cmdReady);
        cmdReady.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdReady.setText("Ready");
        cmdReady.setToolTipText("Click this button to set the game to the \"Ready\" state.");
        cmdReady.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdReady.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdReady_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlMain.add(cmdReady, gridBagConstraints);

        gameButtons.add(cmdSet);
        cmdSet.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdSet.setText("Set");
        cmdSet.setToolTipText("Click this button to set the game to the \"Set\" state.");
        cmdSet.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSet_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlMain.add(cmdSet, gridBagConstraints);

        gameButtons.add(cmdKickOff);
        cmdKickOff.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdKickOff.setText("Play");
        cmdKickOff.setToolTipText("Click this button to set the game to the \"Playing\" state.");
        cmdKickOff.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdKickOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPlay_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlMain.add(cmdKickOff, gridBagConstraints);

        gameButtons.add(cmdFinish);
        cmdFinish.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdFinish.setText("Finish");
        cmdFinish.setToolTipText("Click this button to set the game to the \"Finish\" state.");
        cmdFinish.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdFinish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFinish_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlMain.add(cmdFinish, gridBagConstraints);

        cmdBlueDropIn.setBackground(new java.awt.Color(153, 153, 255));
        cmdBlueDropIn.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdBlueDropIn.setText("Out By Blue");
        cmdBlueDropIn.setToolTipText("Click when the Blue Team kicks the ball out");
        cmdBlueDropIn.setMargin(new java.awt.Insets(2, 1, 2, 1));
        cmdBlueDropIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBlueDropIn_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlMain.add(cmdBlueDropIn, gridBagConstraints);

        cmdRedDropIn.setBackground(new java.awt.Color(255, 102, 102));
        cmdRedDropIn.setFont(new java.awt.Font("Dialog", 0, 12));
        cmdRedDropIn.setText("Out By Red");
        cmdRedDropIn.setToolTipText("Click when the Red Team kicks the ball out");
        cmdRedDropIn.setMargin(new java.awt.Insets(2, 1, 2, 1));
        cmdRedDropIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRedDropIn_Selected(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlMain.add(cmdRedDropIn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(pnlMain, gridBagConstraints);

        gameDetailsPanel.setLayout(new java.awt.GridBagLayout());

        gameDetailsPanel.setBorder(new javax.swing.border.TitledBorder(null, "Game Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
        chkAutoPause.setFont(new java.awt.Font("Dialog", 0, 12));
        chkAutoPause.setText("Auto Pause");
        chkAutoPause.setToolTipText("Check this option to automatically pause the clock when in \"Ready\" and \"Set\" states.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gameDetailsPanel.add(chkAutoPause, gridBagConstraints);

        chkPenaltyShoot.setFont(new java.awt.Font("Dialog", 0, 12));
        chkPenaltyShoot.setText("Penalty Shoot");
        chkPenaltyShoot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPenaltyShootActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gameDetailsPanel.add(chkPenaltyShoot, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(gameDetailsPanel, gridBagConstraints);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-923)/2, (screenSize.height-436)/2, 923, 436);
    }
    // </editor-fold>//GEN-END:initComponents

    private void chkPenaltyShootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPenaltyShootActionPerformed
        data.setSecondaryGameState(chkPenaltyShoot.isSelected()?Constants.STATE2_PENALTYSHOOT:Constants.STATE2_NORMAL);
    }//GEN-LAST:event_chkPenaltyShootActionPerformed


	public static void setEventTitle() {
		setEventTitle(null);
	}

	public static void setEventTitle(String title) {
		if (title == null) {
			title = "No current event";
		}
		((javax.swing.border.TitledBorder)pnlEventTime.getBorder()).setTitle("Special Time : " + title);
		pnlEventTime.repaint(1000);
	}

    private void penalty_Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_penalty_Selected
        if (Constants.debug) { System.out.println("Clicked on a penalty"); }
        penaltySelected = true; applyPenalty();
    }//GEN-LAST:event_penalty_Selected

    private void cmdBlueKickOff_Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBlueKickOff_Selected
        if (Constants.debug) { System.out.println("Clicked on Blue Kick Off"); }
        data.setKickOffTeam(Constants.TEAM_BLUE);
        logString("Switching to Blue to kick off");
    }//GEN-LAST:event_cmdBlueKickOff_Selected

    private void cmdRedKickOff_selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRedKickOff_selected
        if (Constants.debug) { System.out.println("Clicked on Red Kick Off"); }
        data.setKickOffTeam(Constants.TEAM_RED);
        logString("Switching to Red to kick off");
    }//GEN-LAST:event_cmdRedKickOff_selected

    private void cmdInitial_Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInitial_Selected
        if (Constants.debug) { System.out.println("Clicked on Initial"); }
        data.setGameState(Constants.STATE_INITIAL);
        GUIUnpenaliseAll();
	    logString("Initial");
    }//GEN-LAST:event_cmdInitial_Selected

    private void cmdReady_Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdReady_Selected
        if (Constants.debug) { System.out.println("Clicked on Ready"); }
        data.setGameState(Constants.STATE_READY);
        GUIUnpenaliseAll();
	    logString("Ready");
	    setEventTitle("Ready");
	    eventSecs = Constants.READY_SECONDS;
	    eventMins = 0;
	    eventClock = true;
    }//GEN-LAST:event_cmdReady_Selected

    private void cmdSet_Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSet_Selected
        if (Constants.debug) { System.out.println("Clicked on Set"); }
        data.setGameState(Constants.STATE_SET);
        GUIUnpenaliseAll();
	    logString("Set");
    }//GEN-LAST:event_cmdSet_Selected

    private void cmdPlay_Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPlay_Selected
        if (Constants.debug) { System.out.println("Clicked on Play - burst"); }
        data.setGameState(Constants.STATE_PLAYING);
        GUIUnpenaliseAll();
        if (chkPenaltyShoot.isSelected()) {
        	mins = Constants.PENALTY_SHOOT_MINS;
        	secs = Constants.PENALTY_SHOOT_SECS;
        	countForward = false;
        }
        startClock = true;
        broadcast.setBurst(true);
        if (halfKickoffTeam == -1) {
        	halfKickoffTeam = data.getKickOffTeam();
	    	logString("Remembering initial kickoff colour: " +
	    			(data.getKickOffTeam()==Constants.TEAM_RED?"Red":"Blue"));
        }
	    logString("Kickoff! " + (data.getKickOffTeam()==Constants.TEAM_RED?"Red":"Blue") +
	    		" kicking off with " + getGameTimeString() + " remaining in half.");
    }//GEN-LAST:event_cmdPlay_Selected

    private void cmdFinish_Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFinish_Selected
        if (Constants.debug) { System.out.println("Clicked on Finished"); }
        data.setGameState(Constants.STATE_FINISHED);
        GUIUnpenaliseAll();
        startClock = false; 
	    logString("Finsh.  Score: " +
	    	"Team #" + data.getTeamNumber(Constants.TEAM_BLUE) + " : " + data.getScore(Constants.TEAM_BLUE) + " goals" +
	    	", Team #" + data.getTeamNumber(Constants.TEAM_RED) + " : " + data.getScore(Constants.TEAM_RED) + " goals");
	    if (data.getHalf()) {
			setEventTitle("Half-time");
			eventSecs = 0;
			eventMins = Constants.HALF_TIME_MINS;
			eventClock = true;
			halfTime = true;
	    }
    }//GEN-LAST:event_cmdFinish_Selected

    private void cmdRedDropIn_Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRedDropIn_Selected
        if (Constants.debug) { System.out.println("Clicked on Red Drop In"); }
        data.setDropInTeam(Constants.TEAM_RED);
	    logString("Ball knocked out by Red");
    }//GEN-LAST:event_cmdRedDropIn_Selected

    private void cmdBlueDropIn_Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBlueDropIn_Selected
        if (Constants.debug) { System.out.println("Clicked on Blue Drop In"); }
        data.setDropInTeam(Constants.TEAM_BLUE);
	    logString("Ball knocked out by Blue");
    }//GEN-LAST:event_cmdBlueDropIn_Selected

    private void cmdTimeReset_Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTimeReset_Selected
        this.secs = 0;
        this.mins = Constants.TIME_MINUTES;
        lblTime.setText(mins + ":00");
        lblTime.setForeground(Color.BLACK);
        this.countForward = false;
        logString("Game time reset to " + getGameTimeString());
    }//GEN-LAST:event_cmdTimeReset_Selected

    private void cmdTimeStart_Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTimeStart_Selected
        startClock = !startClock;
        cmbHalf.setEnabled(!startClock);      // only enable changing of halves when the clock is paused
		if (startClock) {
			logString("Unpausing clock at time " + getGameTimeString());
		} else {
			logString("Pausing clock at time " + getGameTimeString());
		}
    }//GEN-LAST:event_cmdTimeStart_Selected

    private void cmdBlueTimeOut_Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBlueTimeOut_Selected
		timeout = true;
		eventMins = Constants.TIME_OUT_MINS;
		eventSecs = 0;
		eventClock = true;
		startClock = false;
		data.setGameState(Constants.STATE_INITIAL);
		setEventTitle("Blue Time Out");
    }//GEN-LAST:event_cmdBlueTimeOut_Selected

    private void cmdRedTimeOut_Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRedTimeOut_Selected
		timeout = true;
		eventMins = Constants.TIME_OUT_MINS;
		eventSecs = 0;
		eventClock = true;
		startClock = false;
		data.setGameState(Constants.STATE_INITIAL);
		setEventTitle("Red Time Out");
    }//GEN-LAST:event_cmdRedTimeOut_Selected

    private void cmdTimeOutDone_Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTimeOutDone_Selected
		eventMins = 0;
		eventSecs = 0;
		// note: most of the work is actually done by the timer when it realises it has now hit 0
    }//GEN-LAST:event_cmdTimeOutDone_Selected

    private void lblTimeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lblTimeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (Constants.debug) { System.out.println("commit time change"); }
            
            // just change the class members, change in the data structure will
            // automatically be done by updateEstimatedSecs
            mins = Integer.parseInt(lblTime.getText().split(":")[0]);
            secs = Integer.parseInt(lblTime.getText().split(":")[1]);
            logString("Manually changing remaining time to: " + getGameTimeString());
        }
    }//GEN-LAST:event_lblTimeKeyPressed

    private void lblSpecialTimeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lblSpecialTimeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (Constants.debug) { System.out.println("commit event time change"); }
            
            // just change the class members, change in the data structure will
            // automatically be done by updateEstimatedSecs
            eventMins = Integer.parseInt(lblEventTime.getText().split(":")[0]);
            eventSecs = Integer.parseInt(lblEventTime.getText().split(":")[1]);
            logString("Manually changing remaining event time to: " + getGameTimeString(eventMins, eventSecs));
        }
    }//GEN-LAST:event_lblSpecialTimeKeyPressed

    
    // when changing the clock time, the time needs to be applied to the data 
    // structure and the GUI    
    
    // change the game half flag in the data structure    
    private void cmbHalfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbHalfActionPerformed

        String half = (String)cmbHalf.getSelectedItem();
        boolean firstHalf = half.equals("First Half");
        
        if (firstHalf != data.getHalf()) {
        	data.setHalf(firstHalf);
        	switchTeams();
        	logString("Switching halves to " + half);
			if (halfKickoffTeam != -1) {
				data.setKickOffTeam(halfKickoffTeam);
				if (halfKickoffTeam == Constants.TEAM_BLUE) {
					cmdBlueKickOff.setSelected(true);
					logString("Auto setting half kickoff to Blue");
				} else {
					cmdRedKickOff.setSelected(true);
					logString("Auto setting half kickoff to Red");
				}
			}
			cmdTimeReset_Selected(null);
        }
    }//GEN-LAST:event_cmbHalfActionPerformed
    
   
    // need to change the team numbers, colours, and scores around when the 
    // halves are changed
    private void switchTeams() {
        
        int tempTeam  = data.getTeamNumber(Constants.TEAM_BLUE);
        int tempScore = data.getScore(Constants.TEAM_BLUE);
        
        // swap the teams in variables
        data.setTeamNumber(Constants.TEAM_BLUE, data.getTeamNumber(Constants.TEAM_RED));     
        data.setScore(Constants.TEAM_BLUE, data.getScore(Constants.TEAM_RED));
        data.setTeamNumber(Constants.TEAM_RED, tempTeam);
        data.setScore(Constants.TEAM_RED, tempScore);
        
        // change the team numbers in the panel borders
        pnlBlue.setBorder(new javax.swing.border.TitledBorder(null, 
                          "Blue Team - #" + data.getTeamNumber(Constants.TEAM_BLUE),
                          javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                          javax.swing.border.TitledBorder.DEFAULT_POSITION,
                          new java.awt.Font("Dialog", 1, 12)));
        pnlRed.setBorder(new javax.swing.border.TitledBorder(null, 
                         "Red Team - #" + data.getTeamNumber(Constants.TEAM_RED),
                         javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                         javax.swing.border.TitledBorder.DEFAULT_POSITION,
                         new java.awt.Font("Dialog", 1, 12)));        
        
        // change the scores
        lblRedScore.setText("" + data.getScore(Constants.TEAM_RED));
        lblBlueScore.setText("" + data.getScore(Constants.TEAM_BLUE));
        
        // reset the drop in time and team
        data.resetDropIn();
                
        logString("Switching team colours : " + 
        		"Red team is #" + data.getTeamNumber(Constants.TEAM_RED) +
        		", Blue team is #" + data.getTeamNumber(Constants.TEAM_BLUE));
    }            
    
    
    /***************************************************************************
    *
    *  Unpenalise buttons
    *
    ***************************************************************************/
    
    // unpenalise the specified player
    private void unpenalisePlayer(int team, int number) {
        if (team == Constants.TEAM_BLUE) {
            data.setPenalty(Constants.TEAM_BLUE, number-1, Constants.PENALTY_NONE);
            logString("Unpenalise blue #" + number);
        } else {
            data.setPenalty(Constants.TEAM_RED, number-1, Constants.PENALTY_NONE);
            logString("Unpenalise red #" + number);
        }
    }
    
    // the below methods are called by the listeners of the unpenalise buttons,
    // they call unpenalisePlayer to modify the data structure so that the 
    // relevant robot has their penalty state set to Constants.PENALTY_NONE
    
    private void cmdUnpenaliseMouseClicked(java.awt.event.ActionEvent evt) {
    	String cmd = evt.getActionCommand();
    	if (Constants.debug) { System.out.println("Clicked unpenalise: " + cmd); }
    	
    	String[] cmdData = cmd.split(" ",2);
    	byte cmdTeam = -1;
    	if (cmdData[0].equals("Red")) {
    		cmdTeam = Constants.TEAM_RED;
    	} else if (cmdData[0].equals("Blue")) {
    		cmdTeam = Constants.TEAM_BLUE;
    	} else
    		throw new RuntimeException("Unknown command in cmdUnpenaliseMouseClicked");
    	
    	byte playerNum = (byte)Integer.parseInt(cmdData[2]);
    	
    	GUIUnpenalise(cmdTeam, playerNum);
    	unpenalisePlayer(cmdTeam, playerNum);
    }
        
    // wrapper for GUIUnpenalised to unpenalise all GUI elements
    private static void GUIUnpenaliseAll() {
        for (int team=0; team<2; team++) {
            for (int player=1; player<=4; player++) {
                GUIUnpenalise(team, player);
            }
        }
        data.resetPenalties(); 
    }
    
    // reverts the GUI penalty buttons back to an unpenalised state
    private static void GUIUnpenalise(int team, int player) {
        if (team == Constants.TEAM_BLUE) {
            cmdBlueUnpenalise[player].setText("No penalty");
            cmdBlueUnpenalise[player].setEnabled(false);
            cmdBlueUnpenalise[player].setBackground(new Color(204,204,204));
        } else if (team == Constants.TEAM_RED) {
            cmdRedUnpenalise[player].setText("No penalty");
            cmdRedUnpenalise[player].setEnabled(false);
            cmdRedUnpenalise[player].setBackground(new Color(204,204,204));            
        }
    }
    
    /***************************************************************************
     *
     *  Code to modify the scores
     *
     **************************************************************************/    
    // events for the up/down score buttons. Need to concat "" since setText
    // only accepts strings, not ints
    // 1) count up/down score
    // 2) set the score in the data structure
    // 3) update the score on the GUI
    // 4) change kick off teams in GUI
    // 5) change kick off teams in data structure
    // 6) change state to "ready" if necessary (in GUI and data structure)

    private void cmdBlueScoreUp_Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBlueScoreUp_Selected
        int blueScore = data.getScore(Constants.TEAM_BLUE);
        blueScore++;
        data.setScore(Constants.TEAM_BLUE, blueScore);
        lblBlueScore.setText("" + blueScore);
        cmdRedKickOff.setSelected(true);
        data.setKickOffTeam(Constants.TEAM_RED);
        
        GUIUnpenaliseAll();
        data.setGameState(Constants.STATE_READY);
        cmdReady.setSelected(true);
        logString("Blue score (Team #" + data.getTeamNumber(Constants.TEAM_BLUE) + ") increased to " + blueScore);

	    setEventTitle("Ready");
	    eventSecs = Constants.READY_SECONDS;
	    eventMins = 0;
	    eventClock = true;
    }//GEN-LAST:event_cmdBlueScoreUp_Selected

    private void cmdBlueScoreDown_Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBlueScoreDown_Selected
        int blueScore = data.getScore(Constants.TEAM_BLUE);
        blueScore--;
        data.setScore(Constants.TEAM_BLUE, blueScore);
        lblBlueScore.setText("" + blueScore);
        logString("Blue score (Team #" + data.getTeamNumber(Constants.TEAM_BLUE) + ") decreased to " + blueScore);
    }//GEN-LAST:event_cmdBlueScoreDown_Selected

    private void cmdRedScoreUp_Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRedScoreUp_Selected
        int redScore = data.getScore(Constants.TEAM_RED);
        redScore++;
        data.setScore(Constants.TEAM_RED, redScore);
        lblRedScore.setText("" + redScore);
        cmdBlueKickOff.setSelected(true);
        data.setKickOffTeam(Constants.TEAM_BLUE);
        
        GUIUnpenaliseAll();
        data.setGameState(Constants.STATE_READY);
        cmdReady.setSelected(true);
        logString("Red score (Team #" + data.getTeamNumber(Constants.TEAM_RED) + ") increased to " + redScore);

	    setEventTitle("Ready");
	    eventSecs = Constants.READY_SECONDS;
	    eventMins = 0;
	    eventClock = true;
    }//GEN-LAST:event_cmdRedScoreUp_Selected

    private void cmdRedScoreDown_Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRedScoreDown_Selected
        int redScore = data.getScore(Constants.TEAM_RED);
        redScore--;
        data.setScore(Constants.TEAM_RED, redScore);
        lblRedScore.setText("" + redScore);
        logString("Red score (Team #" + data.getTeamNumber(Constants.TEAM_RED) + ") decreased to " + redScore);
    }//GEN-LAST:event_cmdRedScoreDown_Selected


                              
    
    
    /***************************************************************************
     *
     *  Applies the selected penalty / player combination to the data structure
     *
     **************************************************************************/
    // when both of these are true the condition to send out a penalty is met
    private boolean penaltySelected = false;
    private boolean playerSelected  = false;
        
    // translate the penalty name into the penalty constant
    private int getPenaltyConst(String name) {
        
        if (name.equals("Ball Holding")) {
            return Constants.PENALTY_BALL_HOLDING;
        } else if (name.equals("Goalie Pushing")) {
            return Constants.PENALTY_GOALIE_PUSHING;
        } else if (name.equals("Player Pushing")) {
            return Constants.PENALTY_PLAYER_PUSHING;
        } else if (name.equals("Damage")) {
            return Constants.PENALTY_DAMAGE;
        } else if (name.equals("Obstruction")) {
            return Constants.PENALTY_OBSTRUCTION;
        } else if (name.equals("Leaving Field")) {
            return Constants.PENALTY_LEAVING;
        } else if (name.equals("Illegal Defender")) {
            return Constants.PENALTY_ILLEGAL_DEFENDER;
        } else if (name.equals("Illegal Defense")) {
            return Constants.PENALTY_ILLEGAL_DEFENSE;
        } else if (name.equals("Pick Up Request")) {
            return Constants.PENALTY_REQ_FOR_PICKUP;
        }
        return Constants.PENALTY_NONE;
    }
    
    // note: team number is the team number not the colour!
    // Player number is 1 based
    public void applyPenalty(int teamNumber, int playerNum, int penaltyType) {
    	if (teamNumber == data.getTeamNumber(Constants.TEAM_BLUE)) {
		if (penaltyType == Constants.PENALTY_NONE) {
			GUIUnpenalise(Constants.TEAM_BLUE, playerNum);
		}
    		if ((penaltyType != Constants.PENALTY_MANUAL) || (data.getPenalty(Constants.TEAM_BLUE, playerNum-1) == Constants.PENALTY_NONE)) {
				blueCountdown[playerNum-1] = GUIPenalty(penaltyType, Constants.TEAM_BLUE, playerNum);
				data.setPenalty(Constants.TEAM_BLUE, playerNum-1, penaltyType);
				logString("Penalise Blue " + playerNum + ": " + penaltyType );
			}
		} else if (teamNumber == data.getTeamNumber(Constants.TEAM_RED)) {
			if (penaltyType == Constants.PENALTY_NONE) {
				GUIUnpenalise(Constants.TEAM_RED, playerNum);
			}
			if ((penaltyType != Constants.PENALTY_MANUAL) || (data.getPenalty(Constants.TEAM_RED, playerNum-1) == Constants.PENALTY_NONE)) {
				redCountdown[playerNum-1] = GUIPenalty(penaltyType, Constants.TEAM_RED, playerNum);
				data.setPenalty(Constants.TEAM_RED, playerNum-1, penaltyType);
				logString("Penalise Red " + playerNum + ": " + penaltyType );
			}
		}
    }
    
    // this function is called by the player/penalty button clicks
    // it applies the selected penalty to the selected player(s)
    private void applyPenalty() {
        
        // only execute if player(s) and a penalty is selected
        if (!playerSelected || !penaltySelected) { return; }
        
        String text = null;     // name of the penalty
        int penaltyConst;       // constant number of the penalty
        
        int team     = 0;       // team of the player to penalise
        int playerNo = 0;       // player number to penalise
        
        
        // find the name of the selected penalty
        for (Enumeration penalty = penaltyButtons.getElements() ; penalty.hasMoreElements() ;) {
            JToggleButton button = (JToggleButton)(penalty.nextElement());
            if (button.isSelected()) {
                text = button.getText();
                break;
            }
        }
                
        if (text.equals("Invisible")) { return; }
        penaltyConst = getPenaltyConst(text);
        if (Constants.debug) { System.out.println("Applying " + text + " to..."); }
                
        // apply the selected penalty to the selected player(s)
        for (int player=1; player <= numPlayers; player++) {
			if (cmdBlue[player].isSelected()) {
				if (Constants.debug) { System.out.println("\tBlue " + player); }
				blueCountdown[player-1] = GUIPenalty(penaltyConst, Constants.TEAM_BLUE, player);
				data.setPenalty(Constants.TEAM_BLUE, player-1, penaltyConst);
				logString("Penalise Blue " + player + ": " + text);
			}
		}
        for (int player=1; player <= numPlayers; player++) {
			if (cmdRed[player].isSelected()) {
				if (Constants.debug) { System.out.println("\tRed " + player); }
				redCountdown[player-1] = GUIPenalty(penaltyConst, Constants.TEAM_RED, player);
				data.setPenalty(Constants.TEAM_RED, player-1, penaltyConst);
				logString("Penalise Red " + player + ": " + text);
			}
		}
        
        unselectPenalty();      // clear all selections after a penalty is given        
    }
    
    
    // returns the appropriate penalty time based on the penalty given
    private int getPenaltyTime(int penaltyConst, int player) {
        if ((player == Constants.GOALIE_PLAYER_NUMBER &&
                penaltyConst != Constants.PENALTY_REQ_FOR_PICKUP) ||
            penaltyConst == Constants.PENALTY_NONE) {
            return Constants.PENALTY_SHORT_TIME;
        }
        return Constants.PENALTY_LONG_TIME;
    }
    
    
    // changes the GUI penalty buttons to reflect a sanctioned penalty
    // it also returns the duration of the penalty
    private int GUIPenalty(int penaltyConst, int team, int player) {
                
        if (penaltyConst == Constants.PENALTY_NONE) { return 0; }
        int    time  = getPenaltyTime(penaltyConst, player);

	if (data.getPenalty(team, player-1) == Constants.PENALTY_MANUAL) {
		// if we're manually penalised, then just return the current remaining time
		time = (team == Constants.TEAM_RED)?redCountdown[player-1]:blueCountdown[player-1];
	}
        
        String label = "Unpenalise (" + time + ")";
        
        if (team == Constants.TEAM_BLUE) {
            cmdBlueUnpenalise[player].setText(label);
            cmdBlueUnpenalise[player].setEnabled(true);
        } else if (team == Constants.TEAM_RED) {
            cmdRedUnpenalise[player].setText(label);
            cmdRedUnpenalise[player].setEnabled(true);
        }
        return time;
    }
    
    
    // unselects everything in the GUI for a penalty
    private void unselectPenalty() {
        playerSelected  = false;
        penaltySelected = false;
        cmdInvisible.setSelected(true);     // don't select any penalty
        for (int i=1; i<=numPlayers; i++) {
            cmdBlue[i].setSelected(false);
            cmdRed[i].setSelected(false);
        }
    }
    
    private void cmdRed_Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRed_Selected
        if (Constants.debug) { System.out.println("Clicked on Red player"); }
        playerSelected = true; applyPenalty();
    }//GEN-LAST:event_cmdRed_Selected

    private void cmdUnpenalise(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUnpenalise
    	String cmd = evt.getActionCommand();
    	if (Constants.debug) { System.out.println("Clicked unpenalise: " + cmd); }
    	
    	String[] cmdData = cmd.split(" ",2);
    	byte cmdTeam = -1;
    	if (cmdData[0].equals("Red")) {
    		cmdTeam = Constants.TEAM_RED;
    	} else if (cmdData[0].equals("Blue")) {
    		cmdTeam = Constants.TEAM_BLUE;
    	} else
    		throw new RuntimeException("Unknown command in cmdUnpenaliseMouseClicked");
    	
    	byte playerNum = (byte)Integer.parseInt(cmdData[1]);
    	
    	GUIUnpenalise(cmdTeam, playerNum);
    	unpenalisePlayer(cmdTeam, playerNum);
    }//GEN-LAST:event_cmdUnpenalise

    private void cmdBlue_Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBlue_Selected
        if (Constants.debug) { System.out.println("Clicked on Blue player"); }
        playerSelected = true; applyPenalty();
    }//GEN-LAST:event_cmdBlue_Selected

    
    // Player/Penalty button clicks            
    
    // Game Button clicks, these update the data structure and put the game into
    // a specified state, some of these states also reset all penalties    
    // start the timer on kick off                                
    private void close(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_close
        if (Constants.debug) { System.out.println("GUI closing"); }
        broadcast.socketCleanup();
        listen.socketCleanup();
	    logString("Closing");
        log.close();
        log = null;
    }//GEN-LAST:event_close
    
    
    
    /*******************************************************************************
     *
     *  A timer to time the penalty countdown and the clock
     *
     *******************************************************************************/
    private static int oneSecond = 1000;        // interval of clock event
    
    // initial clock values
    private static int secs = 0;
    private static int mins = Constants.TIME_MINUTES;
    
    // initial event clock values
    private static int eventSecs = 0;
    private static int eventMins = 0;
    
    // flags set by clock buttons to start/stop it
    private static boolean startClock = false;
    private static boolean eventClock = false;
    private static boolean countForward = false;
    
    // call other methods that need the time
    private static ActionListener clock = new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            updateClock();                  // update GUI clock
            updateEventClock();				// update Event GUI clock
            updatePenaltyCountDown();       // update penalty button countdowns
            updateEstimatedSecs();          // update secs remaining in struct
            data.updateDropInTime();        // update drop in team/time
        }
    };
     
    
    // updates the number of seconds remaining in the half
    // also indicates whether overtime has occurred using true/false
    private static void updateEstimatedSecs() {
        if (lblTime.getForeground().equals(Color.RED)) {
            data.setEstimatedSecs(0, true);
        } else {
            data.setEstimatedSecs((60*mins)+secs, false);
        }
    }
            
    
    // these arrays hold the penalty countdown values for each player
    private static int[] blueCountdown = new int[Constants.MAX_NUM_PLAYERS];   // 4 robots per team
    private static int[] redCountdown  = new int[Constants.MAX_NUM_PLAYERS];
    
    // update any penalty countdowns in both the data structure and the GUI
    private static void updatePenaltyCountDown() {
        
        // decrement the counters where necessary
        for (int i=0; i<Constants.MAX_NUM_PLAYERS; i++) { 
            if (blueCountdown[i] > 0) { blueCountdown[i]--; }            
        }

        for (int i=0; i<Constants.MAX_NUM_PLAYERS; i++) {
            if (redCountdown[i] > 0) { redCountdown[i]--; }            
        }
        
        // show the new times on the buttons if the player is currently penalised
        
        for (int i=0; i<Constants.MAX_NUM_PLAYERS; i++) {
			if (data.getPenalty(Constants.TEAM_BLUE, i) != Constants.PENALTY_NONE) {
				cmdBlueUnpenalise[i+1].setText("Unpenalise (" + blueCountdown[i] + ")"); 
				data.setSecsTillUnpenalised(Constants.TEAM_BLUE, i, blueCountdown[i]);
			}
        
			if (data.getPenalty(Constants.TEAM_RED, i) != Constants.PENALTY_NONE) {
				cmdRedUnpenalise[i+1].setText("Unpenalise (" + redCountdown[i] + ")"); 
				data.setSecsTillUnpenalised(Constants.TEAM_RED, i, redCountdown[i]);
			}
        }
                
        penaltyColours();
    }
    
    
    // changes the penalty button colour to green when the time is 5 or less seconds
    private static void penaltyColours() {
        boolean beep = false;
        
        for (int i=0; i<Constants.MAX_NUM_PLAYERS; i++) {
        
			if (blueCountdown[i] <= 5 && data.getPenalty(Constants.TEAM_BLUE, i) != Constants.PENALTY_NONE) {
				beep = (beep || blueCountdown[i] == 5 || blueCountdown[i] == 0);
				cmdBlueUnpenalise[i+1].setBackground(Color.GREEN);
			}
			if (redCountdown[i] <= 5 && data.getPenalty(Constants.TEAM_RED, i) != Constants.PENALTY_NONE) {
				beep = (beep || redCountdown[i] == 5 || redCountdown[i] == 0);
				cmdRedUnpenalise[i+1].setBackground(Color.GREEN);
			}
		}

		if (beep && !quiet) {
			Toolkit.getDefaultToolkit().beep();
		}
    }
    
    
    private static void updateEventClock() {
    	if (!eventClock) {
    		return;
    	}
    	
    	if (timeout) {
    		eventSecs--;
    		if (eventSecs < 0) {
    			eventMins--;
    			eventSecs = 59;
    		}
    		if (eventMins < 0) {
    			timeout = false;
    			gameButtons.setSelected(cmdReady.getModel(), true);
				data.setGameState(Constants.STATE_READY);
				GUIUnpenaliseAll();
				logString("Ready");
				setEventTitle("Ready");
				eventSecs = Constants.READY_SECONDS;
				eventMins = 0;
				eventClock = true;
				startClock = true;	// start the clock here - will be stopped again later if chkAutoPause is on
    		}
    	} else if (data.getGameState() == Constants.STATE_READY) {
    		eventSecs--;
    		if (eventSecs <= 0) {
				if (Constants.debug) { System.out.println("Automatic switch to Set"); }
				gameButtons.setSelected(cmdSet.getModel(), true);
				data.setGameState(Constants.STATE_SET);
				GUIUnpenaliseAll();
				logString("Set - Automatic");
				setEventTitle(null);
				eventClock = false;
				eventMins = eventSecs = 0;
    		}
    	} else if (halfTime) {
    		eventSecs--;
    		if (eventSecs < 0) {
    			eventMins--;
    			eventSecs = 59;
    		}
    		if ((eventSecs == 0) && (eventMins == Constants.HALF_TIME_MINS/2)) {
    			cmbHalf.setSelectedIndex(1);
    			data.setGameState(Constants.STATE_INITIAL);
    		}
    		if (eventMins < 0) {
    			halfTime = false;
    			gameButtons.setSelected(cmdReady.getModel(), true);
				data.setGameState(Constants.STATE_READY);
				GUIUnpenaliseAll();
				logString("Auto Ready for second half");
				setEventTitle("Ready");
				eventSecs = Constants.READY_SECONDS;
				eventMins = 0;
				eventClock = true;
				startClock = false;	// Time doesn't start for the second half until the ref says
    		}
    	} else {
			setEventTitle(null);
			eventClock = false;
			eventMins = eventSecs = 0;
		}
    	
        StringBuffer minsLeft = new StringBuffer();
        StringBuffer secsLeft = new StringBuffer();
        DecimalFormat format = new DecimalFormat("00");
        DecimalFormat secFormat = new DecimalFormat("00");
        
        format.format(eventMins, minsLeft, new FieldPosition(0));
        format.format(eventSecs, secsLeft, new FieldPosition(0));
        lblEventTime.setText(minsLeft + ":" + secsLeft);
        
    }
    
    // count down the clock
    private static void updateClock() {
        
        // the clock stops if auto pause is enabled and the game is in the 
        // "Ready" or "Set" states
        if ((data.getGameState() == Constants.STATE_READY ||
             data.getGameState() == Constants.STATE_SET) &&
             chkAutoPause.isSelected()) {
            if (startClock) {
            	logString("Auto pausing clock at time " + getGameTimeString());
            }
            startClock = false;
        }
        
        cmbHalf.setEnabled(!startClock);
        
        // only run if enabled, the clock becomes editable if not running
        if (!startClock) { 
            lblTime.setEnabled(true);
            lblTime.setForeground(Color.BLACK);     // use black when editing
            return; 
        } else {                    
            lblTime.setEnabled(false);
        }
        
        boolean beep = false;
        
        // do countdown / countup
        if (countForward == false) {
            lblTime.setDisabledTextColor(Color.GRAY);       // use gray when 
            lblTime.setForeground(Color.GRAY);              // counting down
            secs--;
            if (secs < 0) {
                secs = 59;
                mins--;
            }
            if (mins == 0 && secs <= 10) {
            	beep = true;
            }
            if (secs == 0 && mins == 0) {
            	countForward = true;
            }
        } else {
            lblTime.setDisabledTextColor(Color.RED);        // count up with red
            lblTime.setForeground(Color.RED);     
            secs++;
            beep = true;
            if (secs > 59) {
                secs = 0;
                mins++;
            }
        }
        
        if (startClock && beep && !quiet) {
        	Toolkit.getDefaultToolkit().beep();
        }
        
        StringBuffer minsLeft = new StringBuffer();
        StringBuffer secsLeft = new StringBuffer();
        DecimalFormat format = new DecimalFormat("00");
        DecimalFormat secFormat = new DecimalFormat("00");
        
        format.format(mins, minsLeft, new FieldPosition(0));
        format.format(secs, secsLeft, new FieldPosition(0));
        lblTime.setText(minsLeft + ":" + secsLeft);
        
    }

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBlueTimeOut;
    private javax.swing.JButton btnRedTimeOut;
    private javax.swing.JButton btnTimeOutDone;
    private static javax.swing.JCheckBox chkAutoPause;
    private javax.swing.JCheckBox chkPenaltyShoot;
    private static javax.swing.JComboBox cmbHalf;
    private javax.swing.JToggleButton cmdBallHolding;
    private javax.swing.JToggleButton cmdBlue1;
    private javax.swing.JToggleButton cmdBlue10;
    private static javax.swing.JButton cmdBlue10Unpenalise;
    private javax.swing.JToggleButton cmdBlue11;
    private static javax.swing.JButton cmdBlue11Unpenalise;
    private static javax.swing.JButton cmdBlue1Unpenalise;
    private javax.swing.JToggleButton cmdBlue2;
    private static javax.swing.JButton cmdBlue2Unpenalise;
    private javax.swing.JToggleButton cmdBlue3;
    private static javax.swing.JButton cmdBlue3Unpenalise;
    private javax.swing.JToggleButton cmdBlue4;
    private static javax.swing.JButton cmdBlue4Unpenalise;
    private javax.swing.JToggleButton cmdBlue5;
    private static javax.swing.JButton cmdBlue5Unpenalise;
    private javax.swing.JToggleButton cmdBlue6;
    private static javax.swing.JButton cmdBlue6Unpenalise;
    private javax.swing.JToggleButton cmdBlue7;
    private static javax.swing.JButton cmdBlue7Unpenalise;
    private javax.swing.JToggleButton cmdBlue8;
    private static javax.swing.JButton cmdBlue8Unpenalise;
    private javax.swing.JToggleButton cmdBlue9;
    private static javax.swing.JButton cmdBlue9Unpenalise;
    private javax.swing.JButton cmdBlueDropIn;
    private javax.swing.JToggleButton cmdBlueKickOff;
    private javax.swing.JButton cmdBlueScoreDown;
    private javax.swing.JButton cmdBlueScoreUp;
    private javax.swing.JToggleButton cmdDamage;
    private javax.swing.JToggleButton cmdFinish;
    private javax.swing.JToggleButton cmdGoaliePushing;
    private javax.swing.JToggleButton cmdIllegalDefender;
    private javax.swing.JToggleButton cmdIllegalDefense;
    private javax.swing.JToggleButton cmdInitial;
    private javax.swing.JToggleButton cmdInvisible;
    private javax.swing.JToggleButton cmdKickOff;
    private javax.swing.JToggleButton cmdLeavingField;
    private javax.swing.JToggleButton cmdObstruction;
    private javax.swing.JToggleButton cmdPickupRequest;
    private javax.swing.JToggleButton cmdPlayerPushing;
    private static javax.swing.JToggleButton cmdReady;
    private javax.swing.JToggleButton cmdRed1;
    private javax.swing.JToggleButton cmdRed10;
    private static javax.swing.JButton cmdRed10Unpenalise;
    private javax.swing.JToggleButton cmdRed11;
    private static javax.swing.JButton cmdRed11Unpenalise;
    private static javax.swing.JButton cmdRed1Unpenalise;
    private javax.swing.JToggleButton cmdRed2;
    private static javax.swing.JButton cmdRed2Unpenalise;
    private javax.swing.JToggleButton cmdRed3;
    private static javax.swing.JButton cmdRed3Unpenalise;
    private javax.swing.JToggleButton cmdRed4;
    private static javax.swing.JButton cmdRed4Unpenalise;
    private javax.swing.JToggleButton cmdRed5;
    private static javax.swing.JButton cmdRed5Unpenalise;
    private javax.swing.JToggleButton cmdRed6;
    private static javax.swing.JButton cmdRed6Unpenalise;
    private javax.swing.JToggleButton cmdRed7;
    private static javax.swing.JButton cmdRed7Unpenalise;
    private javax.swing.JToggleButton cmdRed8;
    private static javax.swing.JButton cmdRed8Unpenalise;
    private javax.swing.JToggleButton cmdRed9;
    private static javax.swing.JButton cmdRed9Unpenalise;
    private javax.swing.JButton cmdRedDropIn;
    private javax.swing.JToggleButton cmdRedKickOff;
    private javax.swing.JButton cmdRedScoreDown;
    private javax.swing.JButton cmdRedScoreUp;
    private static javax.swing.JToggleButton cmdSet;
    private javax.swing.JButton cmdTimeReset;
    private javax.swing.JButton cmdTimeStart;
    private static javax.swing.ButtonGroup gameButtons;
    private javax.swing.JPanel gameDetailsPanel;
    private javax.swing.ButtonGroup kickOffButtons;
    private javax.swing.JLabel lblBlueScore;
    private javax.swing.JLabel lblBlueTeam;
    private static javax.swing.JTextField lblEventTime;
    private javax.swing.JLabel lblRedScore;
    private javax.swing.JLabel lblRedTeam;
    private static javax.swing.JTextField lblTime;
    private javax.swing.ButtonGroup penaltyButtons;
    private javax.swing.JPanel pnlBlue;
    private static javax.swing.JPanel pnlEventTime;
    private javax.swing.JPanel pnlKickOff;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlPenalties;
    private javax.swing.JPanel pnlRed;
    private javax.swing.JPanel pnlScore;
    private javax.swing.JPanel pnlStatus;
    private javax.swing.JPanel pnlTime;
    // End of variables declaration//GEN-END:variables
    
}
